- name: install apt packages
  apt:
    name: "{{ item }}"
    state: present
  with_items: "{{ RABBITMQ_APT_PACKAGES }}"

- name: Open RabbitMQ firewall ports
  ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
  with_items:
    - 5671
    - 15671
    - 80

- name: generate certificate for domain
  command: "letsencrypt certonly --email ops@opencraft.com --authenticator standalone --standalone-supported-challenges http-01 --http-01-port 80 --non-interactive --agree-tos --keep --expand -d {{ RABBITMQ_HOSTNAME }}"
  args:
    creates: "/etc/letsencrypt/live/{{ RABBITMQ_HOSTNAME }}/cert.pem"

- name: set up cron job for certificate renewal
  cron:
    name: "Renew SSL certificate using the letsencrypt client"
    job: letsencrypt renew --standalone-supported-challenges http-01 --http-01-port 80
    hour: "*/12"
    minute: 42
    cron_file: letsencrypt-renew
    user: root

- name: add rabbitmq repository
  apt_repository:
    repo: 'deb https://www.rabbitmq.com/debian/ testing main'
    state: present

- name: add rabbitmq trusted key
  apt_key:
    url: https://www.rabbitmq.com/rabbitmq-release-signing-key.asc
    state: present

- name: install rabbitmq
  apt:
    name: "rabbitmq-server={{ RABBITMQ_VERSION }}"
    update_cache: yes
    state: installed

- name: Set the file descriptor limit to a high value in the systemd service
  ini_file:
    dest: /lib/systemd/system/rabbitmq-server.service
    section: Service
    option: "{{ item }}"
    value: 65535
    backup: yes
  with_items:
    - LimitNOFILE
    - LimitNPROC
  notify:
    - reload systemd
    - restart rabbitmq
  tags:
    - fd_limit

- name: set letsencrypt directory owner
  file:
    path: "/etc/letsencrypt/{{ item }}"
    owner: rabbitmq
    state: directory
  with_items:
    - live
    - archive

- name: write rabbitmq configuration
  template:
    src: rabbitmq.config.j2
    dest: /etc/rabbitmq/rabbitmq.config
  notify:
    - restart rabbitmq

- name: enable rabbitmq plugins
  rabbitmq_plugin:
    names: rabbitmq_management,rabbitmq_tracing,rabbitmq_federation
    state: enabled
  notify:
    - restart rabbitmq

- name: create default admin user
  rabbitmq_user:
    user: "{{ RABBITMQ_ADMIN_USERNAME }}"
    tags: "administrator,{{ RABBITMQ_ADMIN_USERNAME }}"
    password: "{{ RABBITMQ_ADMIN_PASSWORD }}"
    vhost: /
    configure_priv: .*
    write_priv: .*
    read_priv: .*
    state: present

- name: remove default guest user
  rabbitmq_user:
    user: guest
    state: absent

- name: ensure vhost /test is present
  rabbitmq_vhost:
    name: /test
    state: present
